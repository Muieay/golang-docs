package main

import "fmt"

/*
1-hello-world.go - Go语言入门程序
=================================

文件功能：
这是Go语言的最基础入门程序，演示了Go程序的基本结构、包导入、函数定义、变量声明和格式化输出等核心概念。

程序结构说明：
- package main: 定义当前文件属于main包，这是所有可执行Go程序的入口包
- import "fmt": 导入标准库中的fmt包，用于格式化输入输出操作
- func main(): 主函数，程序执行的起点，每个可执行Go程序必须有且只有一个main函数

关键概念解释：
1. 包(package): Go代码的组织单位，每个文件必须声明所属的包
2. 导入(import): 使用其他包的功能前必须先导入
3. 函数(func): 代码块的可重用单元，main函数是特殊的主入口函数
4. 变量声明(:=): Go的简短变量声明语法，自动推断类型
5. 格式化输出(Printf): 使用格式化字符串进行精确输出控制
*/

func main() {
    /*
    main函数 - 程序执行入口
    
    功能：程序启动后第一个被执行的函数
    特点：
    - 无参数无返回值
    - 必须存在于main包中
    - 程序从这里开始执行，从这里结束
    */
    
    // fmt.Println - 基本输出函数
    // 功能：打印字符串并自动添加换行符
    // 参数：任意类型的值，会自动转换为字符串
    fmt.Println("Hello, World!")
    
    // 演示中文字符串输出
    // Go语言原生支持UTF-8编码，可以直接处理中文字符
    fmt.Println("你好，世界！")
    
    /*
    变量声明与格式化输出
    
    := 语法糖：Go的简短变量声明方式
    - 左侧变量名右侧赋值表达式
    - 编译器自动推断变量类型
    - 只能在函数内部使用
    
    fmt.Printf：格式化输出函数
    - 第一个参数是格式化字符串
    - %s表示字符串占位符
    - %s\n表示字符串后加换行
    */
    name := "Go语言"      // 字符串变量，自动推断为string类型
    version := "1.21"     // 字符串变量，存储版本号
    fmt.Printf("欢迎使用%s，版本%s\n", name, version)
    
    /*
    练习指导：
    1. 修改变量值：尝试修改name和version的值，观察输出变化
    2. 添加新变量：声明新的变量并打印
    3. 使用不同格式化动词：
       - %d 整数
       - %f 浮点数
       - %t 布尔值
       - %v 任意值
    */
    fmt.Println("尝试修改代码，重新运行看看效果！")
}